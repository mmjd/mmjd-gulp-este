// Generated by CoffeeScript 1.7.1
(function() {
  var fs, globals, gulp, path;

  gulp = require('gulp');

  fs = require('fs');

  path = require('path');

  globals = Object.keys(global);


  /**
    @param {string} baseJsDir
    @param {(string|Array.<string>)} paths
    @return {Stream} Node.js Stream.
   */

  module.exports = function(baseJsDir, paths) {
    var autoRequire, chai, changedFilePath, doc, filter, jsdom, mocha, nodejsPath, react, requireUncache, sinon;
    if (!Array.isArray(paths)) {
      paths = [paths];
    }
    nodejsPath = path.join(baseJsDir, 'bootstrap/nodejs');
    changedFilePath = this.changedFilePath;
    if (changedFilePath) {
      if (!/_test\.js$/.test(changedFilePath)) {
        changedFilePath = changedFilePath.replace('.js', '_test.js');
      }
      if (!fs.existsSync(changedFilePath)) {
        return;
      }
    }
    chai = require('chai');
    filter = require('gulp-filter');
    jsdom = require('jsdom');
    mocha = require('gulp-mocha');
    react = require('react');
    requireUncache = require('require-uncache');
    sinon = require('sinon');
    Object.keys(global).forEach((function(_this) {
      return function(key) {
        if (globals.indexOf(key) > -1) {
          return;
        }
        return delete global[key];
      };
    })(this));
    global.assert = chai.assert;
    global.sinon = sinon;
    doc = jsdom.jsdom();
    global.window = doc.parentWindow;
    global.document = doc.parentWindow.document;
    global.navigator = doc.parentWindow.navigator;
    global.React = react;
    requireUncache(path.resolve(nodejsPath));
    requireUncache(path.resolve('tmp/deps0.js'));
    require(path.resolve(nodejsPath));
    require(path.resolve('tmp/deps0.js'));
    autoRequire = (function(_this) {
      return function(file) {
        var fileRelativePath, jsPath, namespace, namespaces, relativePath, _ref;
        jsPath = file.path.replace('_test.js', '.js');
        if (!fs.existsSync(jsPath)) {
          return false;
        }
        relativePath = path.join(_this.depsPrefix, jsPath.replace(_this.dirname, ''));
        if (goog.dependencies_.pathToNames) {
          namespaces = goog.dependencies_.pathToNames[relativePath];
          namespace = Object.keys(namespaces)[0];
          if (namespace) {
            goog.require(namespace);
          }
        } else {
          _ref = goog.dependencies_.nameToPath;
          for (namespace in _ref) {
            fileRelativePath = _ref[namespace];
            if (fileRelativePath === relativePath) {
              goog.require(namespace);
              break;
            }
          }
        }
        return true;
      };
    })(this);
    return gulp.src(changedFilePath != null ? changedFilePath : paths).pipe(filter(autoRequire)).pipe(mocha({
      reporter: 'dot',
      ui: 'tdd'
    }));
  };

}).call(this);
